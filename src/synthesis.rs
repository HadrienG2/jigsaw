//! Utilities for audio synthesis

use crate::{audio, AudioFrequency, AudioPhase, AudioSample, SamplingRateHz};
use more_asserts::*;
use num_traits::{cast, Float};

/// Type suitable for storing oscillator harmonics
//
// This guarantees that we can store harmonics as long as requested saw
// frequencies are above 1 Hz, which includes the whole audio range...
pub(crate) type HarmonicsCounter = SamplingRateHz;

/// Number of bits of the HarmonicsCounter integer type
const HARMONICS_COUNTER_BITS: u32 = (std::mem::size_of::<HarmonicsCounter>() as u32) * 8;

/// For oscillators whose analog counterpart have infinite frequency content,
/// such as sawtooth or square waves, tell how many harmonics must be generated
/// in order to get a maximally accurate band-limited signal.
pub(crate) fn band_limited_harmonics(
    sampling_rate: SamplingRateHz,
    oscillator_freq: AudioFrequency,
) -> HarmonicsCounter {
    // Check that the inputs make sense
    audio::validate_sampling_rate(sampling_rate);
    audio::validate_audio_frequency((sampling_rate, oscillator_freq));

    // Compute the number of harmonics of a band-limited signal
    let nyquist_frequency = audio::nyquist_frequency(sampling_rate);
    let num_harmonics = (nyquist_frequency / oscillator_freq).trunc();
    assert_le!(
        num_harmonics,
        HarmonicsCounter::MAX as AudioFrequency,
        "Oscillator frequency is too low, harmonics count overflows counter"
    );
    num_harmonics as _
}

/// Test that an harmonics count, such as the one generated by
/// band_limited_harmonics(), can be losslessly converted to a floating-point
/// type with a mantissa of N bits.
pub(crate) fn check_harmonics_precision(num_harmonics: HarmonicsCounter, mantissa_bits: u32) {
    if mantissa_bits < HARMONICS_COUNTER_BITS {
        assert_le!(
            num_harmonics,
            (2 as HarmonicsCounter).pow(mantissa_bits),
            "Too many harmonics to accurately represent them as floating-point",
        );
    }
}

/// Given a fundamental sinus' phase, compute the value of all of its sinus
/// harmonics up to a certain rank with maximal precision.
///
/// You can pick the precision in which the harmonics will be computed, but f64
/// will be slow, and f32 won't be much faster and will be too imprecise.
///
/// This is where the following harmonics computation methods come in.
///
pub(crate) fn sin_harmonics_precise<F: Float>(
    phase: f64,
    num_harmonics: HarmonicsCounter,
) -> impl Iterator<Item = f64> {
    (1..=num_harmonics).map(move |harmonic| {
        let phase = cast::<f64, F>(harmonic as f64 * phase).unwrap();
        cast(phase.sin()).unwrap()
    })
}

/// Given a fundamental sin/cos pair, compute the value of all of its (sin, cos)
/// harmonics using an iterative approach based on the
/// sincos((n+1)x) = f(sincos(nx)) trigonometric identities.
///
/// This approach doesn't use more memory than the naive approach, but is not
/// super precise and will break down relatively quickly as num_harmonics goes
/// up. It is only viable because we have to compute at twice the precision of
/// the desired result for accumulation error reasons.
///
/// Also, it doesn't vectorize as well as the following approach.
///
pub(crate) fn sincos_harmonics_iterative(
    (sin_1, cos_1): (f64, f64),
    num_harmonics: HarmonicsCounter,
) -> impl Iterator<Item = (f64, f64)> {
    let (mut sin_n, mut cos_n) = (0.0, 1.0);
    std::iter::from_fn(move || {
        let (sin, cos) = (sin_n * cos_1 + cos_n * sin_1, cos_n * cos_1 - sin_n * sin_1);
        sin_n = sin;
        cos_n = cos;
        Some((sin, cos))
    })
    .take(num_harmonics as usize)
}

/// Given a fundamental sin/cos pair, compute the value of all of its (sin, cos)
/// harmonics using a recursive approach inspired by the FFT algorithm.
///
/// This approach requires a storage buffer for num_harmonics (sin, cos) pairs,
/// but it is more precise than the previous one (each harmonic is a sum of only
/// O(log2(num_harmonics)) terms, not O(num_harmonics) terms) and vectorizes
/// very well so as long as the buffer fits in the L1 cache it will be faster.
///
pub(crate) fn sincos_harmonics_smart(
    (sin_1, cos_1): (f64, f64),
    (sin_buf, cos_buf): (&mut [f64], &mut [f64]),
) {
    let num_harmonics = sin_buf.len();
    let sin_buf = &mut sin_buf[..num_harmonics];
    let cos_buf = &mut cos_buf[..num_harmonics];
    sin_buf[0] = sin_1;
    cos_buf[0] = cos_1;
    let mut computed_harmonics = 1;
    while computed_harmonics < num_harmonics {
        let ref_cos = cos_buf[computed_harmonics - 1];
        let ref_sin = sin_buf[computed_harmonics - 1];
        let remaining_harmonics = num_harmonics - computed_harmonics;
        let incoming_harmonics = computed_harmonics.min(remaining_harmonics);
        for old_harmonic in 0..incoming_harmonics {
            let new_harmonic = old_harmonic + computed_harmonics;
            // Safety: This is safe because by construction, neither
            //         old_harmonic not new_harmonic can go above
            //         num_harmonics. It is necessary because right now,
            //         rustc's bound check elision is not smart enough and
            //         kills autovectorization, which is unacceptable.
            unsafe {
                *sin_buf.get_unchecked_mut(new_harmonic) = sin_buf.get_unchecked(old_harmonic)
                    * ref_cos
                    + cos_buf.get_unchecked(old_harmonic) * ref_sin;
                *cos_buf.get_unchecked_mut(new_harmonic) = cos_buf.get_unchecked(old_harmonic)
                    * ref_cos
                    - sin_buf.get_unchecked(old_harmonic) * ref_sin;
            }
        }
        computed_harmonics *= 2;
    }
}

/// This crate is all about implementing digital oscillators for audio synthesis
///
/// All digital oscillators produce a band-limited approximation of a
/// band-unlimited mathematical function ranging from -1.0 to 1.0.
//
// TODO: Add support for applying windowing to non-audible harmonics so that the
//       Gibbs phenomenon is less annoying. The goal is to spread its energy so
//       that worst-case error goes down.
pub trait Oscillator: Iterator<Item = AudioSample> {
    /// Set up an oscillator
    fn new(
        sampling_rate: SamplingRateHz,
        oscillator_freq: AudioFrequency,
        initial_phase: AudioPhase,
    ) -> Self;

    // TODO: Add a method to query the amount of Gibbs phenomenon overshoot,
    //       that users can leverage to tune down the amplitude when a signal is
    //       to be sent to the loudspeakers and clipping must be avoided.
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::{
        audio::{test_tools as audio_tests, NonZeroSamplingRate},
        test_tools::panics,
    };
    use audio_tests::is_standard_rate;
    use quickcheck::{quickcheck, TestResult};

    mod band_limited_harmonics {
        use super::*;

        /// Minimal input frequency for this function
        fn min_freq(rate: SamplingRateHz) -> AudioFrequency {
            let max_harmonics = HarmonicsCounter::MAX as AudioFrequency;
            audio::nyquist_frequency(rate) / max_harmonics
        }

        /// Test that a requested oscillator frequency falls into the ideal range.
        /// Other frequencies are tested via specific edge-case tests.
        fn is_standard_freq(rate: NonZeroSamplingRate, freq: AudioFrequency) -> bool {
            audio_tests::is_standard_freq(rate, freq) && freq <= min_freq(rate.get())
        }

        quickcheck! {
            /// Test reasonable sampling rates and frequencies
            fn general_case(rate: NonZeroSamplingRate, freq: AudioFrequency) -> TestResult {
                // Avoid edge cases which are left to dedicated tests
                if !(is_standard_rate(rate) && is_standard_freq(rate, freq)) {
                    return TestResult::discard();
                }

                // Check the amount of band-limited harmonics
                // TODO: Handle "too many harmonics scenario as a separate test
                let rate = rate.get();
                let num_harmonics = band_limited_harmonics(rate, freq);
                let num_harmonics = num_harmonics as AudioFrequency;
                let nyquist_frequency = audio::nyquist_frequency(rate);
                assert_le!(num_harmonics * freq, nyquist_frequency);
                assert_gt!((num_harmonics + 1.0) * freq, nyquist_frequency);
                TestResult::passed()
            }

            /// Test excessively low frequencies
            fn too_many_harmonics(rate: NonZeroSamplingRate) -> bool {
                let rate = rate.get();
                panics(|| band_limited_harmonics(rate, 0.99 * min_freq(rate)))
                    && panics(|| band_limited_harmonics(rate, 0.01 * min_freq(rate)))
            }
        }
    }

    quickcheck! {
        fn check_harmonics_precision(num_harmonics: HarmonicsCounter) -> bool {
            use super::check_harmonics_precision;
            assert_eq!(
                panics(|| check_harmonics_precision(num_harmonics, f32::MANTISSA_DIGITS)),
                (num_harmonics as f32) as HarmonicsCounter != num_harmonics,
            );
            assert_eq!(
                panics(|| check_harmonics_precision(num_harmonics, f64::MANTISSA_DIGITS)),
                (num_harmonics as f64) as HarmonicsCounter != num_harmonics,
            );
            true
        }
    }

    // TODO: Test harmonics computations
}
